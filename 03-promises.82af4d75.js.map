{"mappings":"YACA,IAAMA,EAAOC,SAASC,cAAc,SAoEpCF,EAAKG,iBAAiB,UAAU,SAACC,GAC/BA,EAAGC,oBAGLL,EAAKG,iBAAiB,UApEtB,SAAuBG,EAAUC,GAC/B,IAAMC,EAAaR,EAAKE,cAAc,uBAAuBO,MACvDC,EAAYV,EAAKE,cAAc,sBAAsBO,MACrDE,EAASX,EAAKE,cAAc,wBAAwBO,MAE1DG,QAAQC,IAAIF,EAAQH,EAAYE,GAChC,IAAMI,EAAgBC,KAAKC,SAAW,GAuBtC,SAASC,IACP,IAAK,IAAIC,EAAI,EAAGA,EAAIP,EAAQO,IAGlBV,EAAaE,GADrBJ,EAAW,GAGXa,YAAW,WACT,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBR,KAAKC,SAAW,GAEhCQ,EAAQC,SAASjB,GACjBkB,EAAWhB,GAAaJ,EAAW,GAErCiB,EACFF,EAAQ,CAAEM,SAAUrB,IAAYsB,MAAOJ,EAAQE,IAE/CJ,EAAO,CAAEK,SAAUrB,IAAYsB,MAAOJ,EAAQE,OAE/CG,MAAK,SAAAC,G,IAAGC,EAAQD,EAARH,SAAUK,EAAKF,EAALF,MACnBhB,QAAQC,IACL,uBAAwCoB,OAAfF,EAAS,QAAYE,OAAND,EAAM,UAEhDE,OAAM,SAAAJ,G,IAAGC,EAAQD,EAARH,SAAUK,EAAKF,EAALF,MAClBhB,QAAQC,IACL,sBAAqCoB,OAAfF,EAAS,QAAYE,OAAND,EAAM,YAEjDtB,EAAYQ,GA/CnBC,YAAW,WACO,IAAIC,SAAQ,SAACC,EAASC,GAEhCR,EACFO,EAAQ,CAAEM,SAAU,EAAGC,MAAOpB,IAE9Bc,EAAO,CAAEK,SAAU,EAAGC,MAAOpB,OAI9BqB,MAAK,SAAAC,G,IAAGH,EAAQG,EAARH,SAAUC,EAAKE,EAALF,MACjBhB,QAAQC,IACL,uBAAwCoB,OAAfN,EAAS,QAAYM,OAANL,EAAM,UAElDM,OAAM,SAAAJ,G,IAAGH,EAAQG,EAARH,SAAUC,EAAKE,EAALF,MAClBhB,QAAQC,IACL,sBAAuCoB,OAAfN,EAAS,QAAYM,OAANL,EAAM,UAEjDO,QAAQlB,KACVT,GAiCHI,QAAQC,O","sources":["src/js/03-promises.js"],"sourcesContent":["\nconst form = document.querySelector('.form')\n\nconst values = {}\n\nfunction createPromise(position, delay) {\n  const firstDelay = form.querySelector('input[name=\"delay\"]').value\n  const stepDelay = form.querySelector('input[name=\"step\"]').value\n  const amount = form.querySelector('input[name=\"amount\"]').value\n\n  console.log(amount, firstDelay, stepDelay);\n  const shouldResolve = Math.random() > 0.3;\n\n  setTimeout(() => {\n    const newProm = new Promise((resolve, reject) => {\n\n      if (shouldResolve) {\n        resolve({ position: 1, delay: firstDelay })\n      } else {\n        reject({ position: 1, delay: firstDelay });\n      }\n    }\n    )\n      .then(({ position, delay }) => {\n        console.log\n          (`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        console.log\n          (`❌ Rejected promise ${position} in ${delay}ms`);\n      })\n      .finally(doNext);\n  }, firstDelay)\n\n  function doNext() {\n    for (let i = 1; i < amount; i++) {\n\n      position = 2;\n      delay = firstDelay + stepDelay * position\n\n      setTimeout(() => {\n        return new Promise((resolve, reject) => {\n          const shouldResolve = Math.random() > 0.3;\n\n          const first = parseInt(firstDelay)\n          const secDelay = stepDelay * (position - 1);\n\n          if (shouldResolve) {\n            resolve({ position: position++, delay: first + secDelay })\n          } else {\n            reject({ position: position++, delay: first + secDelay });\n          }\n        }).then(({ position, delay }) => {\n          console.log\n            (`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n          .catch(({ position, delay }) => {\n            console.log\n              (`❌ Rejected promise ${position} in ${delay}ms`);\n          });\n      }, stepDelay * i)\n\n    }\n  }\n\n  console.log\n\n};\n\nform.addEventListener('submit', (ev) => {\n  ev.preventDefault();\n})\n\nform.addEventListener('submit', createPromise)\n\n\n\n"],"names":["$ce04d3a99e08e73b$var$form","document","querySelector","addEventListener","ev","preventDefault","position1","delay1","firstDelay","value","stepDelay","amount","console","log","shouldResolve1","Math","random","doNext","i","setTimeout","Promise","resolve","reject","shouldResolve","first","parseInt","secDelay","position","delay","then","param","_$position","_$delay","concat","catch","finally"],"version":3,"file":"03-promises.82af4d75.js.map"}